#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π GUI - –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import tkinter as tk
from tkinter import messagebox
import json
import time
import threading

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from src.gui.main_window import MainWindow
from src.system_model import SystemModel, Node, NodeType, Link, LinkType
from src.simulator.network_simulator import NetworkSimulator, SimulationConfig
from src.models.adverse_conditions import AdverseConditions
import random
import numpy as np

class TestGUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π GUI"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.config = self._load_config()
        self.main_window = MainWindow(self.root, self.config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
        self.test_network = self._create_test_network()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç—å –≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        self.main_window.network_viewer.update_network(self.test_network)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
        self.simulator = None
        
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            return {
                "simulation": {"time_steps": 1000, "dt": 0.1, "random_seed": 42},
                "network": {"nodes": 10, "connections": 0.3, "bandwidth": 1000, "latency": 10, "reliability": 0.95},
                "adverse_conditions": {"noise_level": 0.1, "interference_probability": 0.05, "failure_rate": 0.02, "jamming_intensity": 0.1}
            }
    
    def _create_test_network(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å"""
        network = SystemModel("–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å –¥–ª—è GUI")
        
        # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã
        node_types = [NodeType.SERVER, NodeType.ROUTER, NodeType.SWITCH, NodeType.CLIENT, NodeType.GATEWAY]
        
        for i in range(15):
            node_type = random.choice(node_types)
            node = Node(
                id=f"node_{i}",
                node_type=node_type,
                capacity=random.uniform(100, 1000),
                reliability=random.uniform(0.85, 0.99),
                x=random.uniform(0, 100),
                y=random.uniform(0, 100),
                threat_level=random.uniform(0.1, 0.3),
                load=random.uniform(0.2, 0.8),
                encryption=random.choice([True, False])
            )
            network.add_node(node)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
        nodes = list(network.nodes.keys())
        link_types = list(LinkType)
        
        for i, source in enumerate(nodes):
            for j, target in enumerate(nodes[i+1:], i+1):
                if random.random() < 0.4:  # 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–∏
                    link = Link(
                        source=source,
                        target=target,
                        bandwidth=random.uniform(10, 100),
                        latency=random.uniform(1, 50),
                        reliability=random.uniform(0.90, 0.99),
                        link_type=random.choice(link_types),
                        threat_level=random.uniform(0.05, 0.2),
                        load=random.uniform(0.1, 0.6),
                        encryption=random.choice([True, False])
                    )
                    network.add_link(link)
        
        return network
    
    def test_pagination(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏"""
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏
        tabs = ["üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å", "üìä –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", "‚ö° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"]
        
        for i, tab_name in enumerate(tabs):
            print(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: {tab_name}")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ—ë
            notebook = self.main_window.plots_notebook
            for j in range(notebook.index("end")):
                if notebook.tab(j, "text") == tab_name:
                    notebook.select(j)
                    break
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            self.root.update()
            time.sleep(1)
        
        print("‚úì –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_reliability_plot(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏...")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        notebook = self.main_window.plots_notebook
        for j in range(notebook.index("end")):
            if notebook.tab(j, "text") == "üìä –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏":
                notebook.select(j)
                break
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        viz_notebook = self.main_window.viz_notebook
        for j in range(viz_notebook.index("end")):
            if viz_notebook.tab(j, "text") == "üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å":
                viz_notebook.select(j)
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.root.update()
        
        print("‚úì –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
    
    def test_simulation_with_reliability(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        print("–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏–º—É–ª—è—Ü–∏–∏
        config = SimulationConfig(
            duration=60.0,  # 1 –º–∏–Ω—É—Ç–∞
            time_step=0.5,
            enable_traffic=True,
            enable_failures=True,
            enable_adverse_conditions=True
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
        self.simulator = NetworkSimulator(config)
        self.simulator.initialize_network(15, 0.4)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        adverse_conditions = AdverseConditions()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        adverse_conditions.simulate_cyber_attack(
            target_nodes=[1, 2, 3], 
            attack_type="ddos", 
            intensity=0.3, 
            duration=30
        )
        
        adverse_conditions.simulate_network_overload(
            target_nodes=[4, 5], 
            intensity=0.5, 
            duration=40
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.main_window.simulator = self.simulator
        
        # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.simulator.add_update_callback(self.main_window._update_plots)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        simulation_thread = threading.Thread(target=self._run_simulation)
        simulation_thread.daemon = True
        simulation_thread.start()
        
        print("‚úì –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
    
    def _run_simulation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        try:
            self.simulator.start_simulation()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
            while self.simulator.is_running:
                time.sleep(0.1)
            
            print("‚úì –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
    
    def test_network_operations(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ç—å—é"""
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ç—å—é...")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å
        notebook = self.main_window.plots_notebook
        for j in range(notebook.index("end")):
            if notebook.tab(j, "text") == "üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å":
                notebook.select(j)
                break
        
        self.root.update()
        time.sleep(1)
        
        print("‚úì –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def test_status_panel(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞"""
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞...")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
        notebook = self.main_window.plots_notebook
        for j in range(notebook.index("end")):
            if notebook.tab(j, "text") == "‚ö° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã":
                notebook.select(j)
                break
        
        self.root.update()
        time.sleep(1)
        
        print("‚úì –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
    
    def run_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("=" * 60)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô GUI")
        print("=" * 60)
        
        try:
            # –¢–µ—Å—Ç 1: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            self.test_pagination()
            
            # –¢–µ—Å—Ç 2: –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            self.test_reliability_plot()
            
            # –¢–µ—Å—Ç 3: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ç—å—é
            self.test_network_operations()
            
            # –¢–µ—Å—Ç 4: –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
            self.test_status_panel()
            
            # –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            self.test_simulation_with_reliability()
            
            print("\n" + "=" * 60)
            print("–í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            print("\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ GUI:")
            print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –ø–∞–Ω–µ–ª—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            print("‚úÖ –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏")
            print("‚úÖ –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
            print("‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
            print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            import traceback
            traceback.print_exc()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GUI –∏ —Ç–µ—Å—Ç—ã"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ GUI
        self.root.after(2000, self.run_tests)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
        self.root.mainloop()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π GUI...")
    
    try:
        test_gui = TestGUI()
        test_gui.run()
        
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

