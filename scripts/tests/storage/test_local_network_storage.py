"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Ç–µ–π
test_local_network_storage.py - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NetworkStorage
"""

import os
import sys
import logging
from typing import Dict, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.storage.network_storage import NetworkStorage


def test_network_storage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å NetworkStorage"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–µ—Ç–µ–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    storage = NetworkStorage("test_networks")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Ç–∏
    test_networks = {
        "simple_network": {
            'a': ['b', 'c'],
            'b': ['c'],
            'c': []
        },
        "complex_network": {
            'node1': ['node2', 'node3', 'node4'],
            'node2': ['node3'],
            'node3': ['node4', 'node5'],
            'node4': ['node5'],
            'node5': []
        },
        "ring_network": {
            'A': ['B'],
            'B': ['C'],
            'C': ['D'],
            'D': ['A']
        }
    }
    
    print("\n–¢–µ—Å—Ç 1: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–π")
    print("-" * 30)
    
    for name, network_data in test_networks.items():
        success = storage.save_network(name, network_data)
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ '{name}': {'–£—Å–ø–µ—Ö' if success else '–û—à–∏–±–∫–∞'}")
    
    print("\nüìã –¢–µ—Å—Ç 2: –°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π")
    print("-" * 30)
    
    networks = storage.list_networks()
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π: {len(networks)}")
    for network in networks:
        print(f"  - {network}")
    
    print("\nüìñ –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–µ–π")
    print("-" * 30)
    
    for network_name in networks:
        network_data = storage.load_network(network_name)
        if network_data:
            node_count = len(network_data)
            connection_count = sum(len(connections) for connections in network_data.values())
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ '{network_name}': ‚úÖ –£–∑–ª–æ–≤: {node_count}, –°–≤—è–∑–µ–π: {connection_count}")
        else:
            print(f"–ó–∞–≥—Ä—É–∑–∫–∞ '{network_name}': ‚ùå –û—à–∏–±–∫–∞")
    
    print("\n‚ÑπÔ∏è –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç—è—Ö")
    print("-" * 30)
    
    for network_name in networks:
        info = storage.get_network_info(network_name)
        if info:
            print(f"–°–µ—Ç—å '{network_name}':")
            print(f"  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {info['file_size']} –±–∞–π—Ç")
            print(f"  –£–∑–ª–æ–≤: {info['node_count']}")
            print(f"  –°–≤—è–∑–µ–π: {info['connection_count']}")
            print(f"  –ü—É—Ç—å: {info['file_path']}")
        else:
            print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ '{network_name}': ‚ùå –û—à–∏–±–∫–∞")
    
    print("\nüîç –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è")
    print("-" * 30)
    
    test_names = ["simple_network", "nonexistent_network", "complex_network"]
    for name in test_names:
        exists = storage.network_exists(name)
        print(f"–°–µ—Ç—å '{name}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–∞' if exists else '‚ùå –ù–µ—Ç'}")
    
    print("\nüìÑ –¢–µ—Å—Ç 6: –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç")
    print("-" * 30)
    
    for network_name in networks[:2]:  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å–µ—Ç–∏
        success = storage.export_network_to_text(network_name)
        print(f"–≠–∫—Å–ø–æ—Ä—Ç '{network_name}': {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    print("\nüóëÔ∏è –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–∏")
    print("-" * 30)
    
    # –£–¥–∞–ª—è–µ–º –æ–¥–Ω—É —Å–µ—Ç—å
    network_to_delete = networks[0] if networks else "simple_network"
    success = storage.delete_network(network_to_delete)
    print(f"–£–¥–∞–ª–µ–Ω–∏–µ '{network_to_delete}': {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç—å —É–¥–∞–ª–µ–Ω–∞
    exists_after_delete = storage.network_exists(network_to_delete)
    print(f"–°–µ—Ç—å '{network_to_delete}' –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {'‚ùå –í—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists_after_delete else '‚úÖ –£–¥–∞–ª–µ–Ω–∞'}")
    
    print("\nüìä –¢–µ—Å—Ç 8: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("-" * 30)
    
    final_networks = storage.list_networks()
    print(f"–û—Å—Ç–∞–ª–æ—Å—å —Å–µ—Ç–µ–π: {len(final_networks)}")
    for network in final_networks:
        print(f"  - {network}")
    
    print("\nüßπ –¢–µ—Å—Ç 9: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–π")
    print("-" * 30)
    
    success = storage.clear_all_networks()
    print(f"–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ç–µ–π: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã
    final_count = len(storage.list_networks())
    print(f"–°–µ—Ç–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {final_count}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 50)


def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
    
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("=" * 50)
    
    storage = NetworkStorage("test_edge_cases")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç–æ–π —Å–µ—Ç—å—é
    print("\nüìù –¢–µ—Å—Ç: –ü—É—Å—Ç–∞—è —Å–µ—Ç—å")
    empty_network = {}
    success = storage.save_network("empty", empty_network)
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å–µ—Ç–∏: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –∏–º–µ–Ω–∏
    print("\nüìù –¢–µ—Å—Ç: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏")
    invalid_name = "test<>:\"/\\|?*network"
    success = storage.save_network(invalid_name, {'a': ['b']})
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    print("\nüìù –¢–µ—Å—Ç: –î–ª–∏–Ω–Ω–æ–µ –∏–º—è")
    long_name = "a" * 100
    success = storage.save_network(long_name, {'a': ['b']})
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –¥–ª–∏–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º
    print("\nüìù –¢–µ—Å—Ç: –ü—É—Å—Ç–æ–µ –∏–º—è")
    success = storage.save_network("", {'a': ['b']})
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –û—á–∏—Å—Ç–∫–∞
    storage.clear_all_networks()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def test_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –±–æ–ª—å—à–∏–º–∏ —Å–µ—Ç—è–º–∏"""
    
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    storage = NetworkStorage("test_performance")
    
    import time
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Å–µ—Ç—å
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–π —Å–µ—Ç–∏...")
    large_network = {}
    node_count = 1000
    
    for i in range(node_count):
        node_id = f"node_{i}"
        # –ö–∞–∂–¥—ã–π —É–∑–µ–ª —Å–≤—è–∑–∞–Ω —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
        connections = [f"node_{j}" for j in range(i+1, min(i+6, node_count))]
        large_network[node_id] = connections
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    start_time = time.time()
    success = storage.save_network("large_network", large_network)
    save_time = time.time() - start_time
    
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–π —Å–µ—Ç–∏ ({node_count} —É–∑–ª–æ–≤): {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"–í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_time:.3f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    start_time = time.time()
    loaded_network = storage.load_network("large_network")
    load_time = time.time() - start_time
    
    print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–π —Å–µ—Ç–∏: {'‚úÖ –£—Å–ø–µ—Ö' if loaded_network else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {load_time:.3f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    start_time = time.time()
    info = storage.get_network_info("large_network")
    info_time = time.time() - start_time
    
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {'‚úÖ –£—Å–ø–µ—Ö' if info else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_time:.3f} —Å–µ–∫—É–Ω–¥")
    
    if info:
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {info['file_size']} –±–∞–π—Ç")
        print(f"–£–∑–ª–æ–≤: {info['node_count']}")
        print(f"–°–≤—è–∑–µ–π: {info['connection_count']}")
    
    # –û—á–∏—Å—Ç–∫–∞
    storage.clear_all_networks()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_network_storage()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        test_edge_cases()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        test_performance()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
