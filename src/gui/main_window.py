#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ –ö—Ä–æ–≤–∞–≤—ã—Ö –ê–Ω–≥–µ–ª–æ–≤
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import threading
import time
import os

from ..simulator.network_simulator import NetworkSimulator, SimulationConfig
from ..models.adverse_conditions import AdverseCondition, AdverseConditionType
from .network_viewer import NetworkViewer
from .metrics_panel import MetricsPanel
from .control_panel import ControlPanel
from .themes.blood_angels_theme import BloodAngelsTheme
from .network_dialog import NetworkDialog
from ..database.database_manager import DatabaseManager
from ..utils.program_state_manager import ProgramStateManager

class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ –ö—Ä–æ–≤–∞–≤—ã—Ö –ê–Ω–≥–µ–ª–æ–≤"""
    
    def __init__(self, root, config):
        self.root = root
        self.config = config
        self.simulator = None
        self.db_manager = DatabaseManager()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.program_state_manager = ProgramStateManager()
        self.program_state_manager.add_state_change_callback(self._on_program_state_changed)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        self.theme = BloodAngelsTheme()
        self.theme.configure_styles(self.root)
        self.theme.configure_matplotlib_style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.title("‚ïî‚ïê‚ïê‚ïê –ò–ö–° –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–†–û–í–ê–í–´–• –ê–ù–ì–ï–õ–û–í ‚ïê‚ïê‚ïê‚ïó")
        self.root.geometry("1600x1000")
        self.root.minsize(1200, 800)
        self.root.configure(bg=self.theme.COLORS['bg_primary'])
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            self.root.iconbitmap("assets/blood_angels_icon.ico")
        except:
            pass
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._create_menu()
        self._create_widgets()
        self._create_layout()
        self._apply_military_styling()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_simulation_running = False
        
    def _create_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è", command=self._new_simulation)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self._load_config)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self._save_config)
        file_menu.add_separator()
        file_menu.add_command(label="–°–æ–∑–¥–∞—Ç—å/–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å", command=self._open_network_dialog)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å", command=self._save_current_network)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", command=self._export_results)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self._exit_application)
        
        # –ú–µ–Ω—é "–°–∏–º—É–ª—è—Ü–∏—è"
        sim_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–∏–º—É–ª—è—Ü–∏—è", menu=sim_menu)
        sim_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏", command=self._show_simulation_settings)
        sim_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", command=self._add_adverse_conditions)
        
        # –ú–µ–Ω—é "–ê–Ω–∞–ª–∏–∑"
        analysis_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ê–Ω–∞–ª–∏–∑", menu=analysis_menu)
        analysis_menu.add_command(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", command=self._show_performance_stats)
        analysis_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏", command=self._show_reliability_analysis)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self._show_about)
        help_menu.add_command(label="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=self._show_help)
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_panel = None  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ _create_control_panel
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–µ—Ç—Ä–∏–∫
        self.metrics_panel = MetricsPanel(self)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–µ—Ç–∏ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ topology_frame)
        self.network_viewer = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ _create_layout)
        self.plots_notebook = None
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –≤–æ–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ
        self.status_var = tk.StringVar()
        self.status_var.set("‚ïî‚ïê‚ïê‚ïê –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ë–û–ï–í–´–ú –î–ï–ô–°–¢–í–ò–Ø–ú ‚ïê‚ïê‚ïê‚ïó")
        self.status_frame = self.theme.create_military_frame(self.root, 
                                                           title="–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
        self.status_label = tk.Label(self.status_frame,
                                   textvariable=self.status_var,
                                   bg=self.theme.COLORS['bg_panel'],
                                   fg=self.theme.COLORS['text_secondary'],
                                   font=self.theme.FONTS['military'])
        self.status_label.pack(pady=10)
    
    def _create_plots_area(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.plots_notebook = ttk.Notebook(parent)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å"
        self.control_frame = ttk.Frame(self.plots_notebook)
        self.plots_notebook.add(self.control_frame, text="üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_panel()
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"
        self.visualization_frame = ttk.Frame(self.plots_notebook)
        self.plots_notebook.add(self.visualization_frame, text="üìä –ü–∞–Ω–µ–ª—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self._create_visualization_tabs()
        
        # –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        self.status_frame = ttk.Frame(self.plots_notebook)
        self.plots_notebook.add(self.status_frame, text="‚ö° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç—É—Å–∞
        self._create_status_panel()
        
        # –£–ø–∞–∫–æ–≤–∫–∞ notebook
        self.plots_notebook.pack(fill=tk.BOTH, expand=True, pady=(0, 5))
    
    def _create_control_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_panel = ControlPanel(self, self.control_frame, self.config)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(self.control_frame)
        control_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–µ–π
        sim_frame = ttk.LabelFrame(control_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–µ–π")
        sim_frame.pack(fill=tk.X, pady=5)
        
        button_frame = ttk.Frame(sim_frame)
        button_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏
        create_network_btn = ttk.Button(button_frame, text="–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å", 
                                       command=self._create_network)
        create_network_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏
        load_network_btn = ttk.Button(button_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å", 
                                     command=self._load_network)
        load_network_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–∏
        save_network_btn = ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å", 
                                     command=self._save_network)
        save_network_btn.pack(side=tk.LEFT, padx=5)
    
    def _create_visualization_tabs(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ notebook –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.viz_notebook = ttk.Notebook(self.visualization_frame)
        self.viz_notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        self.metrics_frame = ttk.Frame(self.viz_notebook)
        self.viz_notebook.add(self.metrics_frame, text="üìà –ú–µ—Ç—Ä–∏–∫–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫
        self._create_metrics_plots()
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–æ–ø–æ–ª–æ–≥–∏—è —Å–µ—Ç–∏"
        self.topology_frame = ttk.Frame(self.viz_notebook)
        self.viz_notebook.add(self.topology_frame, text="üï∏Ô∏è –¢–æ–ø–æ–ª–æ–≥–∏—è")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–µ—Ç–∏
        self.network_viewer = NetworkViewer(self, self.topology_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"
        self.reliability_frame = ttk.Frame(self.viz_notebook)
        self.viz_notebook.add(self.reliability_frame, text="üõ°Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self._create_reliability_plot()
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–æ–±—ã—Ç–∏—è –æ—Ç–∫–∞–∑–æ–≤"
        self.failures_frame = ttk.Frame(self.viz_notebook)
        self.viz_notebook.add(self.failures_frame, text="‚ö†Ô∏è –û—Ç–∫–∞–∑—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤
        self._create_failures_plot()
    
    def _create_status_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.status_frame)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –°—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏
        sim_status_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏–º—É–ª—è—Ü–∏–∏")
        sim_status_frame.pack(fill=tk.X, pady=5)
        
        self.sim_status_var = tk.StringVar(value="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        status_label = ttk.Label(sim_status_frame, textvariable=self.sim_status_var, 
                                font=("Arial", 12, "bold"))
        status_label.pack(pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
        network_info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏")
        network_info_frame.pack(fill=tk.X, pady=5)
        
        self.network_info_text = tk.Text(network_info_frame, height=10, width=80)
        self.network_info_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics_frame = ttk.LabelFrame(main_frame, text="–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        metrics_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–µ—Ç—Ä–∏–∫
        self.metrics_panel = MetricsPanel(self)
        self.metrics_panel.frame.pack(in_=metrics_frame, fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def _create_reliability_plot(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.reliability_fig = Figure(figsize=(10, 6), dpi=100, 
                                     facecolor=self.theme.COLORS['bg_primary'])
        self.reliability_ax = self.reliability_fig.add_subplot(111)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        self.reliability_ax.set_title("–ù–ê–î–ï–ñ–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´", 
                                     color=self.theme.COLORS['text_secondary'],
                                     fontweight='bold', fontsize=14)
        self.reliability_ax.set_xlabel("–í—Ä–µ–º—è (—Å)", color=self.theme.COLORS['text_primary'])
        self.reliability_ax.set_ylabel("–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å", color=self.theme.COLORS['text_primary'])
        self.reliability_ax.grid(True, alpha=0.3)
        self.reliability_ax.set_ylim(0, 1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        self.reliability_line, = self.reliability_ax.plot([], [], 
                                                         color=self.theme.COLORS['success'],
                                                         linewidth=2, label='–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å')
        
        # –õ–µ–≥–µ–Ω–¥–∞
        self.reliability_ax.legend()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.reliability_canvas = FigureCanvasTkAgg(self.reliability_fig, self.reliability_frame)
        self.reliability_canvas.draw()
        self.reliability_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.reliability_time_data = []
        self.reliability_value_data = []
    
    def _create_failures_plot(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–∞–∑–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤
        self.failures_fig = Figure(figsize=(10, 6), dpi=100, 
                                  facecolor=self.theme.COLORS['bg_primary'])
        self.failures_ax = self.failures_fig.add_subplot(111)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        self.failures_ax.set_title("–°–û–ë–´–¢–ò–Ø –û–¢–ö–ê–ó–û–í", 
                                  color=self.theme.COLORS['text_secondary'],
                                  fontweight='bold', fontsize=14)
        self.failures_ax.set_xlabel("–í—Ä–µ–º—è (—Å)", color=self.theme.COLORS['text_primary'])
        self.failures_ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–∞–∑–æ–≤", color=self.theme.COLORS['text_primary'])
        self.failures_ax.grid(True, alpha=0.3)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        self.failures_line, = self.failures_ax.plot([], [], 
                                                   color=self.theme.COLORS['danger'],
                                                   linewidth=2, label='–û—Ç–∫–∞–∑—ã')
        
        # –õ–µ–≥–µ–Ω–¥–∞
        self.failures_ax.legend()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.failures_canvas = FigureCanvasTkAgg(self.failures_fig, self.failures_frame)
        self.failures_canvas.draw()
        self.failures_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.failures_time_data = []
        self.failures_count_data = []
    
    def _create_metrics_plots(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Å—Ç–∏–ª–µ –ö—Ä–æ–≤–∞–≤—ã—Ö –ê–Ω–≥–µ–ª–æ–≤
        self.metrics_fig = Figure(figsize=(12, 8), dpi=100, 
                                facecolor=self.theme.COLORS['bg_primary'])
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        self.throughput_ax = self.metrics_fig.add_subplot(221)
        self.throughput_ax.set_title("–ü–†–û–ü–£–°–ö–ù–ê–Ø –°–ü–û–°–û–ë–ù–û–°–¢–¨ (–ú–±–∏—Ç/—Å)", 
                                   color=self.theme.COLORS['text_secondary'],
                                   fontweight='bold')
        self.throughput_ax.set_xlabel("–í—Ä–µ–º—è (—Å)", color=self.theme.COLORS['text_primary'])
        self.throughput_ax.set_ylabel("–ú–±–∏—Ç/—Å", color=self.theme.COLORS['text_primary'])
        self.throughput_line, = self.throughput_ax.plot([], [], 
                                                      color=self.theme.COLORS['primary_red'],
                                                      linewidth=3, alpha=0.8)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–µ—Ä–∂–∫–∏
        self.latency_ax = self.metrics_fig.add_subplot(222)
        self.latency_ax.set_title("–ó–ê–î–ï–†–ñ–ö–ê –°–ò–ì–ù–ê–õ–ê (–º—Å)", 
                                color=self.theme.COLORS['text_secondary'],
                                fontweight='bold')
        self.latency_ax.set_xlabel("–í—Ä–µ–º—è (—Å)", color=self.theme.COLORS['text_primary'])
        self.latency_ax.set_ylabel("–º—Å", color=self.theme.COLORS['text_primary'])
        self.latency_line, = self.latency_ax.plot([], [], 
                                                color=self.theme.COLORS['warning'],
                                                linewidth=3, alpha=0.8)
        
        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.reliability_ax = self.metrics_fig.add_subplot(223)
        self.reliability_ax.set_title("–ù–ê–î–ï–ñ–ù–û–°–¢–¨ –°–ò–°–¢–ï–ú–´", 
                                    color=self.theme.COLORS['text_secondary'],
                                    fontweight='bold')
        self.reliability_ax.set_xlabel("–í—Ä–µ–º—è (—Å)", color=self.theme.COLORS['text_primary'])
        self.reliability_ax.set_ylabel("–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å", color=self.theme.COLORS['text_primary'])
        self.reliability_line, = self.reliability_ax.plot([], [], 
                                                        color=self.theme.COLORS['success'],
                                                        linewidth=3, alpha=0.8)
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        self.availability_ax = self.metrics_fig.add_subplot(224)
        self.availability_ax.set_title("–î–û–°–¢–£–ü–ù–û–°–¢–¨ –°–ï–¢–ò", 
                                     color=self.theme.COLORS['text_secondary'],
                                     fontweight='bold')
        self.availability_ax.set_xlabel("–í—Ä–µ–º—è (—Å)", color=self.theme.COLORS['text_primary'])
        self.availability_ax.set_ylabel("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", color=self.theme.COLORS['text_primary'])
        self.availability_line, = self.availability_ax.plot([], [], 
                                                          color=self.theme.COLORS['primary_gold'],
                                                          linewidth=3, alpha=0.8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        self.metrics_fig.tight_layout()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ canvas
        self.metrics_canvas = FigureCanvasTkAgg(self.metrics_fig, self.metrics_frame)
        self.metrics_canvas.draw()
        self.metrics_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
    
    def _create_layout(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –æ–∫–Ω–æ)
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        self._create_plots_area(main_frame)
        
        # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ _create_widgets()
    
    def _apply_military_styling(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤–æ–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤
        if hasattr(self, 'control_panel') and self.control_panel:
            self._style_frame(self.control_panel.frame)
        if hasattr(self, 'metrics_panel') and self.metrics_panel:
            self._style_frame(self.metrics_panel.frame)
        if hasattr(self, 'network_viewer') and self.network_viewer:
            self._style_frame(self.network_viewer.frame)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self._add_military_elements()
    
    def _style_frame(self, frame):
        """–°—Ç–∏–ª–∏–∑—É–µ—Ç —Ñ—Ä–µ–π–º –≤ –≤–æ–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        try:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö tk.Frame
            if hasattr(frame, 'configure') and 'bg' in frame.configure():
                frame.configure(bg=self.theme.COLORS['bg_secondary'])
            # –î–ª—è ttk.Frame –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å
            elif hasattr(frame, 'configure'):
                # ttk.Frame –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç bg –Ω–∞–ø—Ä—è–º—É—é
                pass
            self.theme.add_border_effect(frame)
        except Exception:
            # –ï—Å–ª–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
    
    def _add_military_elements(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
        banner_frame = tk.Frame(self.root, 
                              bg=self.theme.COLORS['primary_red'],
                              height=60)
        banner_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=5)
        banner_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        banner_label = tk.Label(banner_frame,
                              text="‚ïî‚ïê‚ïê‚ïê –ò–ö–° –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–†–û–í–ê–í–´–• –ê–ù–ì–ï–õ–û–í ‚ïê‚ïê‚ïê‚ïó\n"
                                   "‚ïë     –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ï–¢–ò         ‚ïë\n"
                                   "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù",
                              bg=self.theme.COLORS['primary_red'],
                              fg=self.theme.COLORS['text_primary'],
                              font=self.theme.FONTS['military'])
        banner_label.pack(expand=True)
    
    def create_system(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            nodes = int(self.control_panel.nodes_var.get())
            connection_prob = float(self.control_panel.connection_prob_var.get())
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏
            from ..models.network_model import NetworkModel
            network = NetworkModel(nodes=nodes, connection_probability=connection_prob)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–µ—Ç–∏
            self.network_viewer.update_network(network)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            self.status_var.set(f"‚ïî‚ïê‚ïê‚ïê –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ê: {nodes} –£–ó–õ–û–í ‚ïê‚ïê‚ïê‚ïó")
            
            print(f"–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {nodes} —É–∑–ª–æ–≤, {len(network.links)} —Å–≤—è–∑–µ–π")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É: {str(e)}")
    
    def start_simulation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        if self.is_simulation_running:
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
            sim_config = SimulationConfig(
                duration=float(self.control_panel.duration_var.get()),
                time_step=float(self.control_panel.time_step_var.get()),
                random_seed=int(self.control_panel.seed_var.get()),
                enable_traffic=self.control_panel.enable_traffic_var.get(),
                enable_failures=self.control_panel.enable_failures_var.get(),
                enable_adverse_conditions=self.control_panel.enable_adverse_var.get()
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
            self.simulator = NetworkSimulator(sim_config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏
            nodes = int(self.control_panel.nodes_var.get())
            connection_prob = float(self.control_panel.connection_prob_var.get())
            self.simulator.initialize_network(nodes, connection_prob)
            
            # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–∏
            if self.simulator.network:
                self.network_viewer.update_network(self.simulator.network)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            self._add_default_adverse_conditions()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks
            self.simulator.add_update_callback(self._on_simulation_update)
            self.simulator.add_finish_callback(self._on_simulation_finish)
            
            # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            self.simulator.start_simulation()
            self.is_simulation_running = True
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.control_panel.set_simulation_state(True)
            self.status_var.set("‚ïî‚ïê‚ïê‚ïê –ë–û–ï–í–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –ê–ö–¢–ò–í–ù–ê ‚ïê‚ïê‚ïê‚ïó")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é: {str(e)}")
    
    def stop_simulation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        try:
            print("[DEBUG] MainWindow.stop_simulation –≤—ã–∑–≤–∞–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if hasattr(self, 'simulator') and self.simulator:
                print("[DEBUG] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä...")
                self.simulator.stop_simulation()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏
                current_network = self.network_viewer.network
                if current_network:
                    network_id = getattr(current_network, 'id', 0)
                    self.program_state_manager.log_simulation_stopped(network_id, current_network.name)
                    print(f"[DEBUG] –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–∏ {current_network.name}")
            else:
                print("[DEBUG] –°–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ ProgramStateManager
            print("[DEBUG] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ ProgramStateManager...")
            self.program_state_manager.stop_program()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.is_simulation_running = False
            print("[DEBUG] –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if hasattr(self, 'control_panel'):
                self.control_panel.set_simulation_state(False)
                print("[DEBUG] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            print("[DEBUG] –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
    
    def _add_default_adverse_conditions(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        if not self.simulator or not self.simulator.network:
            return
        
        # –®—É–º
        noise_condition = AdverseCondition(
            type=AdverseConditionType.NOISE,
            intensity=0.1,
            duration=30.0,
            probability=0.1,
            affected_nodes=list(range(len(self.simulator.network.nodes))),
            affected_links=[]
        )
        self.simulator.add_adverse_condition(noise_condition)
        
        # –ü–æ–º–µ—Ö–∏
        interference_condition = AdverseCondition(
            type=AdverseConditionType.INTERFERENCE,
            intensity=0.05,
            duration=20.0,
            probability=0.05,
            affected_nodes=list(range(len(self.simulator.network.nodes))),
            affected_links=[]
        )
        self.simulator.add_adverse_condition(interference_condition)
        
        # –û—Ç–∫–∞–∑—ã
        failure_condition = AdverseCondition(
            type=AdverseConditionType.FAILURE,
            intensity=0.02,
            duration=10.0,
            probability=0.02,
            affected_nodes=list(range(len(self.simulator.network.nodes))),
            affected_links=[]
        )
        self.simulator.add_adverse_condition(failure_condition)
    
    def _on_simulation_update(self, timestamp, metrics):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–µ—Ç—Ä–∏–∫
        self.metrics_panel.update_metrics(metrics)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self._update_plots(timestamp, metrics)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–µ—Ç–∏
        if self.simulator and self.simulator.network:
            self.network_viewer.update_network(self.simulator.network)
    
    def _on_simulation_finish(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.is_simulation_running = False
        self.control_panel.set_simulation_state(False)
        self.status_var.set("‚ïî‚ïê‚ïê‚ïê –ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ‚ïê‚ïê‚ïê‚ïó")
        
        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if self.simulator:
            results = self.simulator.get_simulation_results()
            self._show_simulation_results(results)
    
    def _update_plots(self, timestamp, metrics):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
        if self.simulator:
            history = self.simulator.get_metrics_history()
            
            if len(history) > 1:
                times = [m.timestamp for m in history]
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫
                self.throughput_line.set_data(times, [m.throughput for m in history])
                self.latency_line.set_data(times, [m.latency for m in history])
                self.reliability_line.set_data(times, [m.reliability for m in history])
                self.availability_line.set_data(times, [m.availability for m in history])
                
                # –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                self.throughput_ax.relim()
                self.throughput_ax.autoscale_view()
                self.latency_ax.relim()
                self.latency_ax.autoscale_view()
                self.reliability_ax.relim()
                self.reliability_ax.autoscale_view()
                self.availability_ax.relim()
                self.availability_ax.autoscale_view()
                
                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                self.metrics_canvas.draw_idle()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                self._update_reliability_plot(history)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤
                self._update_failures_plot()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
                self._update_system_status()
    
    def _update_reliability_plot(self, history):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        if not history:
            return
            
        times = [m.timestamp for m in history]
        reliability_values = [m.reliability for m in history]
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
        self.reliability_time_data = times
        self.reliability_value_data = reliability_values
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        self.reliability_line.set_data(times, reliability_values)
        
        # –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.reliability_ax.relim()
        self.reliability_ax.autoscale_view()
        
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
        self.reliability_canvas.draw_idle()
    
    def _update_failures_plot(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–∞–∑–æ–≤"""
        if not self.simulator:
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∫–∞–∑–æ–≤
        failure_events = self.simulator.get_failure_events()
        
        if failure_events:
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–∞–∑–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            time_counts = {}
            for event in failure_events:
                time_bucket = int(event['timestamp'] // 10) * 10  # 10-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                time_counts[time_bucket] = time_counts.get(time_bucket, 0) + 1
            
            times = sorted(time_counts.keys())
            counts = [time_counts[t] for t in times]
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
            self.failures_time_data = times
            self.failures_count_data = counts
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            self.failures_line.set_data(times, counts)
            
            # –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.failures_ax.relim()
            self.failures_ax.autoscale_view()
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            self.failures_canvas.draw_idle()
    
    def _update_system_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not self.simulator:
            return
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        if self.simulator.is_running:
            self.sim_status_var.set("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        elif self.simulator.is_paused:
            self.sim_status_var.set("–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            self.sim_status_var.set("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
        if hasattr(self.simulator, 'network') and self.simulator.network:
            network_info = self.simulator.network.get_network_summary()
            self.network_info_text.delete(1.0, tk.END)
            self.network_info_text.insert(1.0, network_info)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–µ—Ç—Ä–∏–∫
        if hasattr(self.simulator, 'performance_metrics'):
            current_metrics = self.simulator.performance_metrics.current_metrics
            if hasattr(current_metrics, 'throughput'):
                from ..models.performance_metrics import MetricsSnapshot
                snapshot = MetricsSnapshot(
                    timestamp=self.simulator.current_time,
                    throughput=current_metrics.get('throughput', 0),
                    latency=current_metrics.get('latency', 0),
                    reliability=current_metrics.get('reliability', 0),
                    availability=current_metrics.get('availability', 0),
                    packet_loss=current_metrics.get('packet_loss', 0),
                    jitter=current_metrics.get('jitter', 0),
                    energy_efficiency=current_metrics.get('energy_efficiency', 0)
                )
                self.metrics_panel.update_metrics(snapshot)
    
    def _create_network(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Ç—å"""
        dialog = NetworkDialog(self.root, self.db_manager)
        if dialog.result:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            from ..system_model import SystemModel, Node, NodeType, Link, LinkType
            import random
            
            network = SystemModel("–ù–æ–≤–∞—è —Å–µ—Ç—å")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤
            for i in range(dialog.result.get('nodes', 10)):
                node_type = random.choice(list(NodeType))
                node = Node(
                    id=f"node_{i}",
                    node_type=node_type,
                    capacity=random.uniform(100, 1000),
                    reliability=random.uniform(0.85, 0.99),
                    x=random.uniform(0, 100),
                    y=random.uniform(0, 100),
                    threat_level=random.uniform(0.1, 0.3),
                    load=random.uniform(0.2, 0.8)
                )
                network.add_node(node)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
            nodes = list(network.nodes.keys())
            connection_prob = dialog.result.get('connection_prob', 0.3)
            
            for i, source in enumerate(nodes):
                for j, target in enumerate(nodes[i+1:], i+1):
                    if random.random() < connection_prob:
                        link = Link(
                            source=source,
                            target=target,
                            bandwidth=random.uniform(10, 100),
                            latency=random.uniform(1, 50),
                            reliability=random.uniform(0.90, 0.99),
                            link_type=random.choice(list(LinkType)),
                            threat_level=random.uniform(0.05, 0.2),
                            load=random.uniform(0.1, 0.6)
                        )
                        network.add_link(link)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–µ—Ç–∏
            self.network_viewer.update_network(network)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ç–∏
            analysis_time = dialog.result.get('analysis_time', 300)  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._create_simulator_for_network(network, analysis_time)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏
            self.program_state_manager.log_network_created(0, network.name)  # ID –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç—å —Å {len(network.nodes)} —É–∑–ª–∞–º–∏ –∏ {len(network.links)} —Å–≤—è–∑—è–º–∏\n–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time} —Å–µ–∫ ({analysis_time/60:.1f} –º–∏–Ω)")
    
    def _load_network(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        from .network_selection_dialog import NetworkSelectionDialog
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
        dialog = NetworkSelectionDialog(self.root, self.db_manager, self)
        result = dialog.show()
        
        if result and result['action'] == 'load':
            try:
                network_data = result['network_data']['network_data']
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                from ..system_model import SystemModel, Node, NodeType, Link, LinkType
                
                network = SystemModel(result['network_name'])
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —É–∑–ª–æ–≤ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ NetworkNode –≤ Node)
                for node_data in network_data.get('nodes', []):
                    # NetworkNode –∏–º–µ–µ—Ç –ø–æ–ª—è: id, x, y, capacity, reliability, processing_delay
                    # Node –∏–º–µ–µ—Ç –ø–æ–ª—è: id, node_type, capacity, reliability, cpu_load, memory_usage, load, threat_level, encryption, x, y
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤
                    try:
                        node_id = f"node_{node_data['id']}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º int –≤ string
                        capacity = float(node_data['capacity'])
                        reliability = float(node_data['reliability'])
                        x = float(node_data.get('x', 0.0))
                        y = float(node_data.get('y', 0.0))
                    except (ValueError, TypeError, KeyError) as e:
                        print(f"[WARNING] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞: {e}")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —É–∑–µ–ª
                    
                    node = Node(
                        id=node_id,
                        node_type=NodeType.SERVER,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é SERVER
                        capacity=capacity,
                        reliability=reliability,
                        cpu_load=0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        memory_usage=0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        load=0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        threat_level=0.1,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        encryption=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        x=x,
                        y=y
                    )
                    network.add_node(node)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ NetworkLink –≤ Link)
                for link_data in network_data.get('links', []):
                    # NetworkLink –∏–º–µ–µ—Ç –ø–æ–ª—è: source, target, bandwidth, latency, reliability, distance
                    # Link –∏–º–µ–µ—Ç –ø–æ–ª—è: source, target, bandwidth, latency, reliability, link_type, utilization, load, encryption, threat_level
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤
                    try:
                        source_id = int(link_data['source'])
                        target_id = int(link_data['target'])
                        bandwidth = float(link_data['bandwidth'])
                        latency = float(link_data['latency'])
                        reliability = float(link_data['reliability'])
                        
                        source = f"node_{source_id}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º source –≤ string
                        target = f"node_{target_id}"  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º target –≤ string
                    except (ValueError, TypeError, KeyError) as e:
                        print(f"[WARNING] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∏: {e}")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å–≤—è–∑—å
                    
                    link = Link(
                        source=source,
                        target=target,
                        bandwidth=bandwidth,
                        latency=latency,
                        reliability=reliability,
                        link_type=LinkType.ETHERNET,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ETHERNET
                        utilization=0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        load=0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        encryption=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        threat_level=0.1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    )
                    network.add_link(link)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–µ—Ç–∏
                self.network_viewer.update_network(network)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
                analysis_time = result.get('analysis_time', 300)  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self._create_simulator_for_network(network, analysis_time)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ç–∏
                network_id = result['network_data']['id']
                self.program_state_manager.log_network_created(network_id, network.name)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç—å: {network.name}\n–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time} —Å–µ–∫ ({analysis_time/60:.1f} –º–∏–Ω)")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å: {str(e)}")
    
    def _save_network(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not hasattr(self, 'network_viewer') or not self.network_viewer.network:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Å–µ—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            network = self.network_viewer.network
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
            from tkinter import simpledialog
            network_name = simpledialog.askstring(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–∏",
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏:",
                initialvalue=network.name
            )
            
            if not network_name:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            description = simpledialog.askstring(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–∏",
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                initialvalue=""
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SystemModel –≤ NetworkModel –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from ..models.network_model import NetworkModel
            
            # –°–æ–∑–¥–∞–µ–º NetworkModel –∏–∑ SystemModel
            network_model = NetworkModel(nodes=0, connection_probability=0)
            network_model.name = network_name
            network_model.description = description or ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
            for node_id, node in network.nodes.items():
                from ..models.network_model import NetworkNode
                network_node = NetworkNode(
                    id=int(node.id.split('_')[1]) if '_' in node.id else 0,
                    x=node.x,
                    y=node.y,
                    capacity=node.capacity,
                    reliability=node.reliability,
                    processing_delay=0.1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                network_model.nodes.append(network_node)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
            for (source, target), link in network.links.items():
                from ..models.network_model import NetworkLink
                source_id = int(source.split('_')[1]) if '_' in source else 0
                target_id = int(target.split('_')[1]) if '_' in target else 0
                
                network_link = NetworkLink(
                    source=source_id,
                    target=target_id,
                    bandwidth=link.bandwidth,
                    latency=link.latency,
                    reliability=link.reliability,
                    distance=10.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
                network_model.links.append(network_link)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            network_id = self.db_manager.save_network(network_model, network_name, description or "")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ—Ç—å '{network_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ID: {network_id})")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å: {str(e)}")
    
    def create_system(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É"""
        self._create_network()
    
    def start_simulation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        if hasattr(self, 'simulator') and self.simulator:
            if not self.simulator.is_running:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
                self.program_state_manager.start_program()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                self.simulator.start_simulation()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
                current_network = self.network_viewer.network
                if current_network:
                    network_id = getattr(current_network, 'id', 0)
                    self.program_state_manager.log_simulation_started(network_id, current_network.name)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.is_simulation_running = True
                
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ—Ç—å")
    
    def _create_simulator_for_network(self, network, analysis_time=300):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–ª—è —Å–µ—Ç–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏–º—É–ª—è—Ü–∏–∏
            from ..simulator.network_simulator import SimulationConfig
            
            config = SimulationConfig(
                duration=float(analysis_time),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                time_step=0.5,
                enable_traffic=True,
                enable_failures=True,
                enable_adverse_conditions=True
            )
            
            print(f"[INFO] –°–æ–∑–¥–∞–Ω —Å–∏–º—É–ª—è—Ç–æ—Ä —Å –≤—Ä–µ–º–µ–Ω–µ–º –∞–Ω–∞–ª–∏–∑–∞: {analysis_time} —Å–µ–∫—É–Ω–¥ ({analysis_time/60:.1f} –º–∏–Ω—É—Ç)")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
            self.simulator = NetworkSimulator(config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä —Å —Å–µ—Ç—å—é
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SystemModel –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä—É
            node_count = len(network.nodes)
            connection_prob = len(network.links) / (node_count * (node_count - 1) / 2) if node_count > 1 else 0
            
            self.simulator.initialize_network(node_count, connection_prob)
            
            # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            self.simulator.add_update_callback(self._update_plots)
            
            print(f"[INFO] –°–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Ç–∏ —Å {node_count} —É–∑–ª–∞–º–∏")
            
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
            try:
                from ..simulator.network_simulator import SimulationConfig
                config = SimulationConfig(duration=300.0, time_step=0.5)
                self.simulator = NetworkSimulator(config)
                print("[INFO] –ë–∞–∑–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            except Exception as e2:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–∂–µ –±–∞–∑–æ–≤—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä: {e2}")
    
    def _show_simulation_results(self, results):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_window = tk.Toplevel(self.root)
        results_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
        results_window.geometry("600x400")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        text_widget = tk.Text(results_window, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(results_window, orient=tk.VERTICAL, command=text_widget.yview)
        text_widget.configure(yscrollcommand=scrollbar.set)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_text = f"""
–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò
====================

–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏: {results['duration']:.2f} —Å–µ–∫
–°–æ–±—ã—Ç–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞: {results['traffic_events']}
–°–æ–±—ã—Ç–∏—è –æ—Ç–∫–∞–∑–æ–≤: {results['failure_events']}

–ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:
- –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {results['network_metrics'].get('throughput', 0):.2f} –ú–±–∏—Ç/—Å
- –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {results['network_metrics'].get('latency', 0):.2f} –º—Å
- –°—Ä–µ–¥–Ω—è—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {results['network_metrics'].get('reliability', 0):.3f}
- –°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {results['network_metrics'].get('availability', 0):.3f}

–ü–û–ö–ê–ó–ê–¢–ï–õ–¨ –ö–ê–ß–ï–°–¢–í–ê: {results['quality_score']:.3f}

–ù–ï–ë–õ–ê–ì–û–ü–†–ò–Ø–¢–ù–´–ï –£–°–õ–û–í–ò–Ø:
"""
        
        for condition_type, count in results['adverse_conditions_summary'].items():
            results_text += f"- {condition_type}: {count} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        
        results_text += f"\n–¢–û–ü–û–õ–û–ì–ò–Ø –°–ï–¢–ò:\n"
        for metric, value in results['network_topology'].items():
            results_text += f"- {metric}: {value}\n"
        
        text_widget.insert(tk.END, results_text)
        text_widget.config(state=tk.DISABLED)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é
    def _new_simulation(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–∏–º—É–ª—è—Ü–∏—é"""
        if self.is_simulation_running:
            self.stop_simulation()
        self.control_panel.reset_to_defaults()
        self.metrics_panel.reset_metrics()
        self.status_var.set("–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏")
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filename:
            try:
                self.config.save_config()
                self.status_var.set(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {str(e)}")
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            defaultextension=".json",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        if filename:
            try:
                self.config.save_config()
                self.status_var.set(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {str(e)}")
    
    def _export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏"""
        if not self.simulator:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename = filedialog.asksaveasfilename(
            title="–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            defaultextension=".csv",
            filetypes=[("CSV —Ñ–∞–π–ª—ã", "*.csv"), ("JSON —Ñ–∞–π–ª—ã", "*.json")]
        )
        if filename:
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                self.status_var.set(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {str(e)}")
    
    def _show_simulation_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    def _add_adverse_conditions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        messagebox.showinfo("–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "–û–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    def _show_performance_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–û–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    def _show_reliability_analysis(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏"""
        messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏", "–û–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
    
    def _show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º 
–≤ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö

–í–µ—Ä—Å–∏—è: 1.0
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: AI Assistant

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
—Ä–∞–±–æ—Ç—ã –ò–ö–° –≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–º–µ—Ö, –æ—Ç–∫–∞–∑–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö
–Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.
        """
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def _show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
    def _exit_application(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.is_simulation_running:
            self.stop_simulation()
        self.root.quit()
    
    def _open_network_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏"""
        try:
            dialog = NetworkDialog(self.root, self.db_manager)
            result = dialog.show()
            
            if result and result['network']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–∏
                self.network_viewer.update_network(result['network'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if self.simulator:
                    self.simulator.network = result['network']
                
                self.status_var.set("‚ïî‚ïê‚ïê‚ïê –°–ï–¢–¨ –ó–ê–ì–†–£–ñ–ï–ù–ê ‚ïê‚ïê‚ïê‚ïó")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å–µ—Ç–∏: {str(e)}")
    
    def _save_current_network(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å"""
        if not self.network_viewer.network:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Å–µ—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–µ—Ç–∏
        save_dialog = tk.Toplevel(self.root)
        save_dialog.title("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å")
        save_dialog.geometry("400x200")
        save_dialog.configure(bg=self.theme.COLORS['bg_primary'])
        save_dialog.transient(self.root)
        save_dialog.grab_set()
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        tk.Label(save_dialog, text="–ò–º—è —Å–µ—Ç–∏:", bg=self.theme.COLORS['bg_primary']).pack(pady=5)
        name_entry = ttk.Entry(save_dialog, width=30)
        name_entry.pack(pady=5)
        
        tk.Label(save_dialog, text="–û–ø–∏—Å–∞–Ω–∏–µ:", bg=self.theme.COLORS['bg_primary']).pack(pady=5)
        desc_entry = ttk.Entry(save_dialog, width=30)
        desc_entry.pack(pady=5)
        
        def save_and_close():
            name = name_entry.get().strip()
            if not name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ç–∏")
                return
            
            try:
                if self.network_viewer.save_current_network(name, desc_entry.get()):
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°–µ—Ç—å '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    save_dialog.destroy()
                    self.status_var.set("‚ïî‚ïê‚ïê‚ïê –°–ï–¢–¨ –°–û–•–†–ê–ù–ï–ù–ê ‚ïê‚ïê‚ïê‚ïó")
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å: {str(e)}")
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(save_dialog)
        buttons_frame.pack(pady=20)
        
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_and_close).pack(side=tk.LEFT, padx=5)
        ttk.Button(buttons_frame, text="–û—Ç–º–µ–Ω–∞", command=save_dialog.destroy).pack(side=tk.LEFT, padx=5)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏
        name_entry.focus_set()
    
    def _on_program_state_changed(self, state, status_info):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if hasattr(self, 'control_panel'):
            self.control_panel._update_button_states()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.update_status_display(status_info)
        
        print(f"[INFO] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑–º–µ–Ω–µ–Ω–æ: {status_info['state_display']}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word"""
        try:
            from ..reports.word_report_generator import WordReportGenerator
            from tkinter import filedialog
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            output_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
                defaultextension=".docx",
                filetypes=[("Word –¥–æ–∫—É–º–µ–Ω—Ç—ã", "*.docx"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            
            if not output_path:
                return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_generator = WordReportGenerator()
            report_path = report_generator.create_report(
                self.program_state_manager,
                self.db_manager,
                output_path
            )
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            
        except ImportError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥—É–ª—å python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: {str(e)}")
    
    def _reset_simulation(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏–º—É–ª—è—Ü–∏—é"""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∏–º—É–ª—è—Ü–∏—é
            if self.simulator:
                self.simulator.stop_simulation()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            self.program_state_manager.stop_program()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.is_simulation_running = False
            if hasattr(self, 'control_panel'):
                self.control_panel.set_simulation_state(False)
            
            # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
            if hasattr(self, 'metrics_panel'):
                self.metrics_panel.reset_metrics()
            
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–∏–º—É–ª—è—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
    
    def update_status_display(self, status_info):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if hasattr(self, 'status_var'):
            state_display = status_info['state_display']
            runtime = status_info['runtime_display']
            current_network = status_info.get('current_network_name', '–ù–µ—Ç')
            
            status_text = f"‚ïî‚ïê‚ïê‚ïê {state_display.upper()} ‚ïê‚ïê‚ïê‚ïó | –í—Ä–µ–º—è: {runtime} | –°–µ—Ç—å: {current_network}"
            self.status_var.set(status_text)

